// RUN: %srcroot/test/runtime/run-scheduler-test.py %s -gxx "%gxx" -llvmgcc "%llvmgcc" -projbindir "%projbindir" -ternruntime "%ternruntime"  -ternbcruntime "%ternbcruntime" 

#include <sys/time.h>
#include <time.h>
#include <errno.h>
#include <assert.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>

#define N 100

pthread_mutex_t mu = PTHREAD_MUTEX_INITIALIZER;

struct timespec oldts;
struct timeval oldtv;
time_t oldtt;

//  require mu hold before calling this function
void check_time(bool init = false)
{  
  struct timespec ts;
  struct timeval tv;
  time_t tt;
  gettimeofday(&tv, NULL);
  clock_gettime(CLOCK_REALTIME, &ts);
  time(&tt);
  
  if (!init)
  {
    if (tv.tv_sec < oldtv.tv_sec || 
      tv.tv_sec == oldtv.tv_sec && tv.tv_usec < oldtv.tv_usec)
      assert(0 && "gettimeofday is not monotonic");
  
    if (ts.tv_sec < oldts.tv_sec || 
      ts.tv_sec == oldts.tv_sec && ts.tv_nsec < oldts.tv_nsec)
      assert(0 && "clock_gettime is not monotonic");
  
    if (tt < oldtt)
      assert(0 && "time is not monotonic");
  }

  oldts = ts;
  oldtv = tv;
  oldtt = tt;
}

void* thread_func(void*) {
  for(unsigned i=0;i<100;++i)
    sched_yield();

  pthread_mutex_lock(&mu);

  check_time();

  pthread_mutex_unlock(&mu);
}


int main(int argc, char *argv[], char *env[]) {
  int ret;
  pthread_t th[N];

  check_time(true);
  for (int i = 0; i < N; ++i)
    pthread_create(&th[i], NULL, thread_func, NULL);

  for (int i = 0; i < N; ++i)
    pthread_join(th[i], NULL);

  printf("test done\n");

  return 0;
}

// CHECK indicates expected output checked by FileCheck; auto-generated by appending -gen to the RUN command above.
// CHECK:      test done
