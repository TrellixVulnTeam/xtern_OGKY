#!/usr/bin/python

# TODO: test dynamic hook of synchronization routines

# TODO: to check the determinism of the RR scheduler, perhaps just run the
# test program a few times and check that the generated schedules are
# identical.

import re
import os
import sys
import argparse
import subprocess

parser = argparse.ArgumentParser(description
                                 ='run scheduler test');
parser.add_argument('program',
                    help='.c, .cpp, or .ll program to run test on')
parser.add_argument('-gxx', dest='gxx', required=True,
                    help='g++ command line')
parser.add_argument('-llvmgcc', dest='llvmgcc', required=True,
                    help='llvmgcc command line')
parser.add_argument('-projbindir', dest='projbindir', required=True,
                    help='directory where tern tools are located')
parser.add_argument('-ternruntime', dest='ternruntime', required=True,
                    help='tern x86 runtime')
parser.add_argument('-ternbcruntime', dest='ternbcruntime', required=True,
                    help='tern bc runtime')
parser.add_argument('-gen', dest='gen', default=False, action='store_true',
                    help='generate expected outputs instead of testing them')

def gen(cmd, prog):
    m = re.search('\|\s*FileCheck.*-check-prefix=(\w+)\s*$', cmd)
    if m == None:
        return False
    print 'generating outputs for %s on %s' % (cmd, prog)
    cmd = cmd[:m.start(0)]
    prefix = m.group(1)
    #print cmd
    p = subprocess.Popen(cmd, stdout=subprocess.PIPE, shell=True)
    output = p.communicate()[0];

    fi = open(prog, 'r')
    fo = open(prog + '~', 'w')
    # print until the first matching lines
    for l in fi:
        if re.match('//\s*' + prefix, l):
            break
        fo.write(l)
    tmp = {'OUT':'output', 'RR':'RR schedule'};
    fo.write('// %s indicates expected %s checked by FileCheck; '\
             'auto-generated by appending -gen to the RUN command above.\n'
             % (prefix, tmp[prefix]));
    for i, l in enumerate(output.splitlines()):
        l = re.split('\s*0x[\dA-Fa-f]+', l, maxsplit=1)[0]
        if i == 0:
            s = ':     '
        else:
            s = '-NEXT:'
        fo.write("// %s%s %s\n" % (prefix, s, l))
    # skip lines matching @prefix and print other lines
    for l in fi:
        if re.match('//\s*' + prefix, l):
            continue
        fo.write(l)
    fo.close()
    fi.close()
    os.rename(fo.name, fi.name)
    return True

def run(cmd, map):
    cmd = cmd.split('RUN:')
    if len(cmd) == 1:
        return
    cmd = cmd[1]
    for key, val in map.iteritems():
        # print key, val
        if isinstance(val, str):
            cmd = cmd.replace('%'+key, val)
    if args['gen'] and gen(cmd, prog):
        return
    print 'running <%s>' % cmd
    os.system(cmd);

args = vars(parser.parse_args())
prog = args['program']
del args['program']

args['s'] = prog
args['t'] = os.path.basename(args['s']) + '.tmp'

# these commands follow the same style as LLVM dejagnu test commands
cmds = '''
// RUN: %llvmgcc %s -c -o %t1.ll -S
// RUN: %projbindir/tern-instr < %t1.ll -o %t2
// RUN: llvm-dis -f %t2-record.bc

// test the x86 .a libraries
// RUN: llc -o %t2.s %t2-record.bc
// RUN: %gxx -o %t2 %t2.s %ternruntime -lpthread
// test FCFS scheduler
// RUN: env TERN_OPTIONS=runtime_type=FCFS ./%t2 | FileCheck %s -check-prefix=OUT
// test RR scheduler
// RUN: rm -rf %t2.outdir
// RUN: env TERN_OPTIONS=runtime_type=RR:log_type=txt:output_dir=%t2.outdir ./%t2  | FileCheck %s -check-prefix=OUT
// RUN: sort -k 2 -n %t2.outdir/*.txt | FileCheck %s -check-prefix=RR
// : %projbindir/logprint -bc %t2-analysis.bc out/tid-0.bin -r -v > /dev/null
// : %projbindir/logprint -bc %t2-analysis.bc out/tid-1.bin -r -v > /dev/null

// stress
// RUN: ./%t2 && ./%t2 && ./%t2  && ./%t2  && ./%t2  && ./%t2  && ./%t2


// test the LLVM .bc modules
// RUN: llvm-ld -o %t3 %t2-record.bc %ternbcruntime
// RUN: llvm-dis -f %t3.bc
// RUN: llc -o %t3.s %t3.bc
// RUN: %gxx -o %t3 %t3.s -lpthread
// test FCFS scheduler
// RUN: env TERN_OPTIONS=runtime_type=FCFS ./%t3 | FileCheck %s -check-prefix=OUT
// test RR scheduler
// RUN: rm -rf %t3.outdir
// RUN: env TERN_OPTIONS=runtime_type=RR:log_type=txt:output_dir=%t3.outdir ./%t3  | FileCheck %s -check-prefix=OUT
// RUN: sort -k 2 -n %t3.outdir/*.txt | FileCheck %s -check-prefix=RR
// : %projbindir/logprint -bc %t2-analysis.bc out/tid-0.bin -r -v > /dev/null
// : %projbindir/logprint -bc %t2-analysis.bc out/tid-1.bin -r -v > /dev/null

// stress
// RUN: ./%t3 && ./%t3 && ./%t3  && ./%t3  && ./%t3  && ./%t3  && ./%t3
'''
for cmd in cmds.splitlines():
    run(cmd, args)
