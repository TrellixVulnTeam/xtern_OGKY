// RUN: %srcroot/test/runtime/run-scheduler-test.py %s -gxx "%gxx" -llvmgcc "%llvmgcc" -projbindir "%projbindir" -ternruntime "%ternruntime" -ternannotlib "%ternannotlib" -ternbcruntime "%ternbcruntime"

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <pthread.h>
#include <assert.h>
#include <unistd.h>

pthread_mutex_t mu = PTHREAD_MUTEX_INITIALIZER;
pthread_barrier_t ba;

#define N (2)

void* thread_func(void* arg) {

  int tid = (intptr_t)arg;

  for(int i=0; i<tid; ++i) {
    pthread_mutex_lock(&mu);
    pthread_mutex_unlock(&mu);
  }

  pthread_mutex_lock(&mu);
  printf("Arrived\n");
  pthread_mutex_unlock(&mu);

  pthread_barrier_wait(&ba);

  pthread_mutex_lock(&mu);
  printf("Left\n");
  pthread_mutex_unlock(&mu);
}

int main(int argc, char *argv[], char *env[]) {
  int ret;
  pthread_t th[N];

  pthread_barrier_init(&ba, NULL, N);

  for(unsigned j=0; j<10; ++j) {
    for(unsigned i=0; i<N; ++i) {
      ret  = pthread_create(&th[i], NULL, thread_func, (void*)i);
      assert(!ret && "pthread_create() failed!");
    }
    for(unsigned i=0; i<N; ++i) {
      ret = pthread_join(th[i], NULL);
      assert(!ret && "pthread_join() failed!");
    }
  }
  pthread_barrier_destroy(&ba);

  return 0;
}

// CHECK indicates expected output checked by FileCheck; auto-generated by appending -gen to the RUN command above.
// CHECK:      Arrived
// CHECK-NEXT: Arrived
// CHECK-NEXT: Left
// CHECK-NEXT: Left
// CHECK-NEXT: Arrived
// CHECK-NEXT: Arrived
// CHECK-NEXT: Left
// CHECK-NEXT: Left
// CHECK-NEXT: Arrived
// CHECK-NEXT: Arrived
// CHECK-NEXT: Left
// CHECK-NEXT: Left
// CHECK-NEXT: Arrived
// CHECK-NEXT: Arrived
// CHECK-NEXT: Left
// CHECK-NEXT: Left
// CHECK-NEXT: Arrived
// CHECK-NEXT: Arrived
// CHECK-NEXT: Left
// CHECK-NEXT: Left
// CHECK-NEXT: Arrived
// CHECK-NEXT: Arrived
// CHECK-NEXT: Left
// CHECK-NEXT: Left
// CHECK-NEXT: Arrived
// CHECK-NEXT: Arrived
// CHECK-NEXT: Left
// CHECK-NEXT: Left
// CHECK-NEXT: Arrived
// CHECK-NEXT: Arrived
// CHECK-NEXT: Left
// CHECK-NEXT: Left
// CHECK-NEXT: Arrived
// CHECK-NEXT: Arrived
// CHECK-NEXT: Left
// CHECK-NEXT: Left
// CHECK-NEXT: Arrived
// CHECK-NEXT: Arrived
// CHECK-NEXT: Left
// CHECK-NEXT: Left
