alias-mgr.h:namespace tern {
cache-util.cpp:using namespace tern;
cache-util.h:namespace tern {
callstack-mgr.cpp:using namespace tern;
callstack-mgr.h:namespace tern {
cfg-mgr.cpp:using namespace tern;
cfg-mgr.cpp:char tern::CfgMgr::ID = 0;
cfg-mgr.h:namespace tern {
dbg-print.h:#define SERRS if(get_option(tern,slicer_print_debug_info)==DBG1)errs()
dbg-print.h:#define SERRS2 if(get_option(tern,slicer_print_debug_info)==DBG2)errs()
dbg-print.h:#define NORMAL_SLICING (get_option(tern,slicer_do_max_slicing)==0)
dbg-print.h:#define MAX_SLICING (get_option(tern,slicer_do_max_slicing)==1)
dbg-print.h:#define RANGE_SLICING (get_option(tern, slicer_do_max_slicing)==2)
dyn-instr.cpp:using namespace tern;
dyn-instr.h:namespace tern {
dyn-instr.h:        Question: does xtern still have this feature? */
dyn-oprd.cpp:using namespace tern;
dyn-oprd.h:namespace tern {
gen-path-slicer-opt.pl:                      "extern $type $name;";} 
instr-id-mgr.cpp:using namespace tern;
instr-id-mgr.h:namespace tern {
instr-id-mgr.h:    /* Internal debugging utilities. */
instr-region.cpp:using namespace tern;
instr-region.h:namespace tern {
inter-slicer.cpp:using namespace tern;
inter-slicer.h:namespace tern {
intra-slicer.cpp:using namespace tern;
intra-slicer.h:namespace tern {
live-set.h:namespace tern {
options.cpp:#include "tern/options.h"
path-slicer.cpp:using namespace tern;
path-slicer.default.options:#           tern options              #
path-slicer.default.options:tern::is_batch_program  1
path-slicer.default.options:tern::window_size       1
path-slicer.default.options:tern::record_mem_access 0
path-slicer.default.options:tern::replay_expire_time 100000000
path-slicer.default.options:tern::print_finish_sched_info 1
path-slicer.default.options:tern::print_broken_sched_info 1
path-slicer.default.options:tern::replayer_use_wait_flag 0
path-slicer.default.options:tern::replayer_load_cache 1
path-slicer.default.options:tern::replayer_enforce_racy_edge 1
path-slicer.default.options:tern::memoizer_simplify_expr 1
path-slicer.default.options:tern::is_mysqld 0
path-slicer.default.options:tern::replayer_use_sched_track 0
path-slicer.default.options:tern::memoizer_round_robin_sched 1
path-slicer.default.options:tern::memoizer_force_ops_external 0
path-slicer.default.options:tern::slicer_do_max_slicing 0
path-slicer.default.options:tern::slicer_use_dsa_alias 0
path-slicer.default.options:tern::slicer_aaol_dbg_level 0
path-slicer.default.options:tern::context_sensitive_alias_query 1
path-slicer.default.options:tern::slicer_calling_ctx_len 100
path-slicer.default.options:tern::memoizer_condition_slicing 1
path-slicer.default.options:tern::memoizer_sync_op_data_dep_slicing 0
path-slicer.default.options:tern::memoizer_race_data_dep_slicing 0
path-slicer.default.options:tern::replayer_block_timeout_interval 500000000
path-slicer.default.options:tern::replayer_track_timeout_interval 500000000
path-slicer.default.options:tern::record_on_failure	0
path-slicer.default.options:tern::recorder_ip	"127.0.0.1"
path-slicer.default.options:tern::recorder_port	8001
path-slicer.default.options:tern::memoizer_print_execute_call 0
path-slicer.default.options:tern::memoizer_print_debug_info 0
path-slicer.default.options:tern::replayer_print_debug_info 0
path-slicer.default.options:tern::replayer_check_hook_id 0
path-slicer.default.options:tern::replayer_only_one_schedule 0
path-slicer.default.options:tern::replayer_print_finishtime_interval 1000
path-slicer.default.options:tern::slicer_do_slicing_based_on_vector_clock 0
path-slicer.default.options:tern::slicer_print_debug_info 0
path-slicer.default.options:tern::slicer_ignore_potential_race 0
path-slicer.default.options:tern::slicer_ignore_no_race_dominant_br 0
path-slicer.default.options:tern::slicer_dump_trace 0
path-slicer.default.options:tern::slicer_start_index 0
path-slicer.default.options:tern::slicer_end_index 0
path-slicer.default.options:tern::slicer_prev_inst_id 0
path-slicer.default.options:tern::slicer_post_inst_id 0
path-slicer.default.options:tern::memoizer_do_fast_mem_ops 0
path-slicer.default.options:tern::slicer_only_enforce_races 0
path-slicer.default.options:tern::slicer_only_caculate_num_symbolic_brs 0
path-slicer.default.options:tern::replayer_skip_barrier 1
path-slicer.default.options:tern::slicer_range_analysis_w_use_pointer 0
path-slicer.default.options:tern::replayer_skip_constraint_check_if_one_child 0
path-slicer.default.options:tern::dump_dir          "./tern-sched"
path-slicer.default.options:tern::input             "./tern-sched/tern.input"
path-slicer.default.options:tern::reference_log     "./tern-sched/ref_sync_tid_order.txt"
path-slicer.default.options:tern::sync_log          "./tern-sched/sync_log.txt"
path-slicer.default.options:tern::order_log         "./tern-sched/sync_tid_order"
path-slicer.default.options:tern::slicing_log         "./tern-sched/slicing.log"
path-slicer.default.options:tern::tern_sync_log     "./tern-sched/tern_sync_log.txt"
path-slicer.default.options:tern::broken_order_log  "./tern-sched/broken_order.txt"
path-slicer.default.options:tern::good_order_log    "./tern-sched/good_order.txt"
path-slicer.default.options:tern::good_window_log   "./tern-sched/good_finished_windows.txt"
path-slicer.default.options:tern::replay_stat_log   "./tern-sched/replay_stat.txt"
path-slicer.default.options:tern::landmark_file    "./tern-sched/sync_event_list.txt"
path-slicer.default.options:tern::fuzzy_satisfy  0
path-slicer.default.options:tern::detect_race      0
path-slicer.default.options:tern::one_race_only    0
path-slicer.default.options:tern::vector_clock_only     1
path-slicer.default.options:tern::prune_useless_writes  1
path-slicer.default.options:tern::suppress_redundant_races  1
path-slicer.h:namespace tern {
path-slicer.h:    /* Must look at the xtern trace format before implementing this function. */
path-slicer-options.cpp:const char* __tern__broken_order_log = NULL;
path-slicer-options.cpp:int __tern__context_sensitive_alias_query = 1;
path-slicer-options.cpp:int __tern__detect_race = 0;
path-slicer-options.cpp:const char* __tern__dump_dir = NULL;
path-slicer-options.cpp:int __tern__fuzzy_satisfy = 0;
path-slicer-options.cpp:const char* __tern__good_order_log = NULL;
path-slicer-options.cpp:const char* __tern__good_window_log = NULL;
path-slicer-options.cpp:const char* __tern__input = NULL;
path-slicer-options.cpp:int __tern__is_batch_program = 1;
path-slicer-options.cpp:int __tern__is_mysqld = 0;
path-slicer-options.cpp:const char* __tern__landmark_file = NULL;
path-slicer-options.cpp:int __tern__memoizer_condition_slicing = 1;
path-slicer-options.cpp:int __tern__memoizer_do_fast_mem_ops = 0;
path-slicer-options.cpp:int __tern__memoizer_force_ops_external = 0;
path-slicer-options.cpp:int __tern__memoizer_print_debug_info = 0;
path-slicer-options.cpp:int __tern__memoizer_print_execute_call = 0;
path-slicer-options.cpp:int __tern__memoizer_race_data_dep_slicing = 0;
path-slicer-options.cpp:int __tern__memoizer_round_robin_sched = 1;
path-slicer-options.cpp:int __tern__memoizer_simplify_expr = 1;
path-slicer-options.cpp:int __tern__memoizer_sync_op_data_dep_slicing = 0;
path-slicer-options.cpp:int __tern__one_race_only = 0;
path-slicer-options.cpp:const char* __tern__order_log = NULL;
path-slicer-options.cpp:int __tern__print_broken_sched_info = 1;
path-slicer-options.cpp:int __tern__print_finish_sched_info = 1;
path-slicer-options.cpp:int __tern__prune_useless_writes = 1;
path-slicer-options.cpp:int __tern__record_mem_access = 0;
path-slicer-options.cpp:int __tern__record_on_failure = 0;
path-slicer-options.cpp:const char* __tern__recorder_ip = NULL;
path-slicer-options.cpp:int __tern__recorder_port = 8001;
path-slicer-options.cpp:const char* __tern__reference_log = NULL;
path-slicer-options.cpp:int __tern__replay_expire_time = 100000000;
path-slicer-options.cpp:const char* __tern__replay_stat_log = NULL;
path-slicer-options.cpp:int __tern__replayer_block_timeout_interval = 500000000;
path-slicer-options.cpp:int __tern__replayer_check_hook_id = 0;
path-slicer-options.cpp:int __tern__replayer_enforce_racy_edge = 1;
path-slicer-options.cpp:int __tern__replayer_load_cache = 1;
path-slicer-options.cpp:int __tern__replayer_only_one_schedule = 0;
path-slicer-options.cpp:int __tern__replayer_print_debug_info = 0;
path-slicer-options.cpp:int __tern__replayer_print_finishtime_interval = 1000;
path-slicer-options.cpp:int __tern__replayer_skip_barrier = 1;
path-slicer-options.cpp:int __tern__replayer_skip_constraint_check_if_one_child = 0;
path-slicer-options.cpp:int __tern__replayer_track_timeout_interval = 500000000;
path-slicer-options.cpp:int __tern__replayer_use_sched_track = 0;
path-slicer-options.cpp:int __tern__replayer_use_wait_flag = 0;
path-slicer-options.cpp:int __tern__slicer_aaol_dbg_level = 0;
path-slicer-options.cpp:int __tern__slicer_calling_ctx_len = 100;
path-slicer-options.cpp:int __tern__slicer_do_max_slicing = 0;
path-slicer-options.cpp:int __tern__slicer_do_slicing_based_on_vector_clock = 0;
path-slicer-options.cpp:int __tern__slicer_dump_trace = 0;
path-slicer-options.cpp:int __tern__slicer_end_index = 0;
path-slicer-options.cpp:int __tern__slicer_ignore_no_race_dominant_br = 0;
path-slicer-options.cpp:int __tern__slicer_ignore_potential_race = 0;
path-slicer-options.cpp:int __tern__slicer_only_caculate_num_symbolic_brs = 0;
path-slicer-options.cpp:int __tern__slicer_only_enforce_races = 0;
path-slicer-options.cpp:int __tern__slicer_post_inst_id = 0;
path-slicer-options.cpp:int __tern__slicer_prev_inst_id = 0;
path-slicer-options.cpp:int __tern__slicer_print_debug_info = 0;
path-slicer-options.cpp:int __tern__slicer_range_analysis_w_use_pointer = 0;
path-slicer-options.cpp:int __tern__slicer_start_index = 0;
path-slicer-options.cpp:int __tern__slicer_use_dsa_alias = 0;
path-slicer-options.cpp:const char* __tern__slicing_log = NULL;
path-slicer-options.cpp:int __tern__suppress_redundant_races = 1;
path-slicer-options.cpp:const char* __tern__sync_log = NULL;
path-slicer-options.cpp:const char* __tern__tern_sync_log = NULL;
path-slicer-options.cpp:int __tern__vector_clock_only = 1;
path-slicer-options.cpp:int __tern__window_size = 1;
path-slicer-options.cpp:    free((void*)__tern__broken_order_log);
path-slicer-options.cpp:	__tern__broken_order_log = NULL;
path-slicer-options.cpp:    free((void*)__tern__dump_dir);
path-slicer-options.cpp:	__tern__dump_dir = NULL;
path-slicer-options.cpp:    free((void*)__tern__good_order_log);
path-slicer-options.cpp:	__tern__good_order_log = NULL;
path-slicer-options.cpp:    free((void*)__tern__good_window_log);
path-slicer-options.cpp:	__tern__good_window_log = NULL;
path-slicer-options.cpp:    free((void*)__tern__input);
path-slicer-options.cpp:	__tern__input = NULL;
path-slicer-options.cpp:    free((void*)__tern__landmark_file);
path-slicer-options.cpp:	__tern__landmark_file = NULL;
path-slicer-options.cpp:    free((void*)__tern__order_log);
path-slicer-options.cpp:	__tern__order_log = NULL;
path-slicer-options.cpp:    free((void*)__tern__recorder_ip);
path-slicer-options.cpp:	__tern__recorder_ip = NULL;
path-slicer-options.cpp:    free((void*)__tern__reference_log);
path-slicer-options.cpp:	__tern__reference_log = NULL;
path-slicer-options.cpp:    free((void*)__tern__replay_stat_log);
path-slicer-options.cpp:	__tern__replay_stat_log = NULL;
path-slicer-options.cpp:    free((void*)__tern__slicing_log);
path-slicer-options.cpp:	__tern__slicing_log = NULL;
path-slicer-options.cpp:    free((void*)__tern__sync_log);
path-slicer-options.cpp:	__tern__sync_log = NULL;
path-slicer-options.cpp:    free((void*)__tern__tern_sync_log);
path-slicer-options.cpp:	__tern__tern_sync_log = NULL;
path-slicer-options.cpp:    __tern__broken_order_log = strdup("./tern-sched/broken_order.txt");
path-slicer-options.cpp:    __tern__dump_dir = strdup("./tern-sched");
path-slicer-options.cpp:    __tern__good_order_log = strdup("./tern-sched/good_order.txt");
path-slicer-options.cpp:    __tern__good_window_log = strdup("./tern-sched/good_finished_windows.txt");
path-slicer-options.cpp:    __tern__input = strdup("./tern-sched/tern.input");
path-slicer-options.cpp:    __tern__landmark_file = strdup("./tern-sched/sync_event_list.txt");
path-slicer-options.cpp:    __tern__order_log = strdup("./tern-sched/sync_tid_order");
path-slicer-options.cpp:    __tern__recorder_ip = strdup("127.0.0.1");
path-slicer-options.cpp:    __tern__reference_log = strdup("./tern-sched/ref_sync_tid_order.txt");
path-slicer-options.cpp:    __tern__replay_stat_log = strdup("./tern-sched/replay_stat.txt");
path-slicer-options.cpp:    __tern__slicing_log = strdup("./tern-sched/slicing.log");
path-slicer-options.cpp:    __tern__sync_log = strdup("./tern-sched/sync_log.txt");
path-slicer-options.cpp:    __tern__tern_sync_log = strdup("./tern-sched/tern_sync_log.txt");
path-slicer-options.cpp:    if (!strcmp (dom, "tern")) {
path-slicer-options.cpp:             if(__tern__broken_order_log) free((void*)__tern__broken_order_log);
path-slicer-options.cpp:             __tern__broken_order_log = strdup(v);
path-slicer-options.cpp:            { __tern__context_sensitive_alias_query = (int)strtoul(val, 0, 0); return 1; }
path-slicer-options.cpp:            { __tern__detect_race = (int)strtoul(val, 0, 0); return 1; }
path-slicer-options.cpp:             if(__tern__dump_dir) free((void*)__tern__dump_dir);
path-slicer-options.cpp:             __tern__dump_dir = strdup(v);
path-slicer-options.cpp:            { __tern__fuzzy_satisfy = (int)strtoul(val, 0, 0); return 1; }
path-slicer-options.cpp:             if(__tern__good_order_log) free((void*)__tern__good_order_log);
path-slicer-options.cpp:             __tern__good_order_log = strdup(v);
path-slicer-options.cpp:             if(__tern__good_window_log) free((void*)__tern__good_window_log);
path-slicer-options.cpp:             __tern__good_window_log = strdup(v);
path-slicer-options.cpp:             if(__tern__input) free((void*)__tern__input);
path-slicer-options.cpp:             __tern__input = strdup(v);
path-slicer-options.cpp:            { __tern__is_batch_program = (int)strtoul(val, 0, 0); return 1; }
path-slicer-options.cpp:            { __tern__is_mysqld = (int)strtoul(val, 0, 0); return 1; }
path-slicer-options.cpp:             if(__tern__landmark_file) free((void*)__tern__landmark_file);
path-slicer-options.cpp:             __tern__landmark_file = strdup(v);
path-slicer-options.cpp:            { __tern__memoizer_condition_slicing = (int)strtoul(val, 0, 0); return 1; }
path-slicer-options.cpp:            { __tern__memoizer_do_fast_mem_ops = (int)strtoul(val, 0, 0); return 1; }
path-slicer-options.cpp:        if (!strcmp (opt, "memoizer_force_ops_external"))
path-slicer-options.cpp:            { __tern__memoizer_force_ops_external = (int)strtoul(val, 0, 0); return 1; }
path-slicer-options.cpp:            { __tern__memoizer_print_debug_info = (int)strtoul(val, 0, 0); return 1; }
path-slicer-options.cpp:            { __tern__memoizer_print_execute_call = (int)strtoul(val, 0, 0); return 1; }
path-slicer-options.cpp:            { __tern__memoizer_race_data_dep_slicing = (int)strtoul(val, 0, 0); return 1; }
path-slicer-options.cpp:            { __tern__memoizer_round_robin_sched = (int)strtoul(val, 0, 0); return 1; }
path-slicer-options.cpp:            { __tern__memoizer_simplify_expr = (int)strtoul(val, 0, 0); return 1; }
path-slicer-options.cpp:            { __tern__memoizer_sync_op_data_dep_slicing = (int)strtoul(val, 0, 0); return 1; }
path-slicer-options.cpp:            { __tern__one_race_only = (int)strtoul(val, 0, 0); return 1; }
path-slicer-options.cpp:             if(__tern__order_log) free((void*)__tern__order_log);
path-slicer-options.cpp:             __tern__order_log = strdup(v);
path-slicer-options.cpp:            { __tern__print_broken_sched_info = (int)strtoul(val, 0, 0); return 1; }
path-slicer-options.cpp:            { __tern__print_finish_sched_info = (int)strtoul(val, 0, 0); return 1; }
path-slicer-options.cpp:            { __tern__prune_useless_writes = (int)strtoul(val, 0, 0); return 1; }
path-slicer-options.cpp:            { __tern__record_mem_access = (int)strtoul(val, 0, 0); return 1; }
path-slicer-options.cpp:            { __tern__record_on_failure = (int)strtoul(val, 0, 0); return 1; }
path-slicer-options.cpp:             if(__tern__recorder_ip) free((void*)__tern__recorder_ip);
path-slicer-options.cpp:             __tern__recorder_ip = strdup(v);
path-slicer-options.cpp:            { __tern__recorder_port = (int)strtoul(val, 0, 0); return 1; }
path-slicer-options.cpp:             if(__tern__reference_log) free((void*)__tern__reference_log);
path-slicer-options.cpp:             __tern__reference_log = strdup(v);
path-slicer-options.cpp:            { __tern__replay_expire_time = (int)strtoul(val, 0, 0); return 1; }
path-slicer-options.cpp:             if(__tern__replay_stat_log) free((void*)__tern__replay_stat_log);
path-slicer-options.cpp:             __tern__replay_stat_log = strdup(v);
path-slicer-options.cpp:            { __tern__replayer_block_timeout_interval = (int)strtoul(val, 0, 0); return 1; }
path-slicer-options.cpp:            { __tern__replayer_check_hook_id = (int)strtoul(val, 0, 0); return 1; }
path-slicer-options.cpp:            { __tern__replayer_enforce_racy_edge = (int)strtoul(val, 0, 0); return 1; }
path-slicer-options.cpp:            { __tern__replayer_load_cache = (int)strtoul(val, 0, 0); return 1; }
path-slicer-options.cpp:            { __tern__replayer_only_one_schedule = (int)strtoul(val, 0, 0); return 1; }
path-slicer-options.cpp:            { __tern__replayer_print_debug_info = (int)strtoul(val, 0, 0); return 1; }
path-slicer-options.cpp:            { __tern__replayer_print_finishtime_interval = (int)strtoul(val, 0, 0); return 1; }
path-slicer-options.cpp:            { __tern__replayer_skip_barrier = (int)strtoul(val, 0, 0); return 1; }
path-slicer-options.cpp:            { __tern__replayer_skip_constraint_check_if_one_child = (int)strtoul(val, 0, 0); return 1; }
path-slicer-options.cpp:            { __tern__replayer_track_timeout_interval = (int)strtoul(val, 0, 0); return 1; }
path-slicer-options.cpp:            { __tern__replayer_use_sched_track = (int)strtoul(val, 0, 0); return 1; }
path-slicer-options.cpp:            { __tern__replayer_use_wait_flag = (int)strtoul(val, 0, 0); return 1; }
path-slicer-options.cpp:            { __tern__slicer_aaol_dbg_level = (int)strtoul(val, 0, 0); return 1; }
path-slicer-options.cpp:            { __tern__slicer_calling_ctx_len = (int)strtoul(val, 0, 0); return 1; }
path-slicer-options.cpp:            { __tern__slicer_do_max_slicing = (int)strtoul(val, 0, 0); return 1; }
path-slicer-options.cpp:            { __tern__slicer_do_slicing_based_on_vector_clock = (int)strtoul(val, 0, 0); return 1; }
path-slicer-options.cpp:            { __tern__slicer_dump_trace = (int)strtoul(val, 0, 0); return 1; }
path-slicer-options.cpp:            { __tern__slicer_end_index = (int)strtoul(val, 0, 0); return 1; }
path-slicer-options.cpp:            { __tern__slicer_ignore_no_race_dominant_br = (int)strtoul(val, 0, 0); return 1; }
path-slicer-options.cpp:            { __tern__slicer_ignore_potential_race = (int)strtoul(val, 0, 0); return 1; }
path-slicer-options.cpp:            { __tern__slicer_only_caculate_num_symbolic_brs = (int)strtoul(val, 0, 0); return 1; }
path-slicer-options.cpp:            { __tern__slicer_only_enforce_races = (int)strtoul(val, 0, 0); return 1; }
path-slicer-options.cpp:            { __tern__slicer_post_inst_id = (int)strtoul(val, 0, 0); return 1; }
path-slicer-options.cpp:            { __tern__slicer_prev_inst_id = (int)strtoul(val, 0, 0); return 1; }
path-slicer-options.cpp:            { __tern__slicer_print_debug_info = (int)strtoul(val, 0, 0); return 1; }
path-slicer-options.cpp:            { __tern__slicer_range_analysis_w_use_pointer = (int)strtoul(val, 0, 0); return 1; }
path-slicer-options.cpp:            { __tern__slicer_start_index = (int)strtoul(val, 0, 0); return 1; }
path-slicer-options.cpp:            { __tern__slicer_use_dsa_alias = (int)strtoul(val, 0, 0); return 1; }
path-slicer-options.cpp:             if(__tern__slicing_log) free((void*)__tern__slicing_log);
path-slicer-options.cpp:             __tern__slicing_log = strdup(v);
path-slicer-options.cpp:            { __tern__suppress_redundant_races = (int)strtoul(val, 0, 0); return 1; }
path-slicer-options.cpp:             if(__tern__sync_log) free((void*)__tern__sync_log);
path-slicer-options.cpp:             __tern__sync_log = strdup(v);
path-slicer-options.cpp:        if (!strcmp (opt, "tern_sync_log"))
path-slicer-options.cpp:             if(__tern__tern_sync_log) free((void*)__tern__tern_sync_log);
path-slicer-options.cpp:             __tern__tern_sync_log = strdup(v);
path-slicer-options.cpp:            { __tern__vector_clock_only = (int)strtoul(val, 0, 0); return 1; }
path-slicer-options.cpp:            { __tern__window_size = (int)strtoul(val, 0, 0); return 1; }
path-slicer-options.cpp:    o << "tern::broken_order_log    " << __tern__broken_order_log << endl;
path-slicer-options.cpp:    o << "tern::context_sensitive_alias_query    " << __tern__context_sensitive_alias_query << endl;
path-slicer-options.cpp:    o << "tern::detect_race    " << __tern__detect_race << endl;
path-slicer-options.cpp:    o << "tern::dump_dir    " << __tern__dump_dir << endl;
path-slicer-options.cpp:    o << "tern::fuzzy_satisfy    " << __tern__fuzzy_satisfy << endl;
path-slicer-options.cpp:    o << "tern::good_order_log    " << __tern__good_order_log << endl;
path-slicer-options.cpp:    o << "tern::good_window_log    " << __tern__good_window_log << endl;
path-slicer-options.cpp:    o << "tern::input    " << __tern__input << endl;
path-slicer-options.cpp:    o << "tern::is_batch_program    " << __tern__is_batch_program << endl;
path-slicer-options.cpp:    o << "tern::is_mysqld    " << __tern__is_mysqld << endl;
path-slicer-options.cpp:    o << "tern::landmark_file    " << __tern__landmark_file << endl;
path-slicer-options.cpp:    o << "tern::memoizer_condition_slicing    " << __tern__memoizer_condition_slicing << endl;
path-slicer-options.cpp:    o << "tern::memoizer_do_fast_mem_ops    " << __tern__memoizer_do_fast_mem_ops << endl;
path-slicer-options.cpp:    o << "tern::memoizer_force_ops_external    " << __tern__memoizer_force_ops_external << endl;
path-slicer-options.cpp:    o << "tern::memoizer_print_debug_info    " << __tern__memoizer_print_debug_info << endl;
path-slicer-options.cpp:    o << "tern::memoizer_print_execute_call    " << __tern__memoizer_print_execute_call << endl;
path-slicer-options.cpp:    o << "tern::memoizer_race_data_dep_slicing    " << __tern__memoizer_race_data_dep_slicing << endl;
path-slicer-options.cpp:    o << "tern::memoizer_round_robin_sched    " << __tern__memoizer_round_robin_sched << endl;
path-slicer-options.cpp:    o << "tern::memoizer_simplify_expr    " << __tern__memoizer_simplify_expr << endl;
path-slicer-options.cpp:    o << "tern::memoizer_sync_op_data_dep_slicing    " << __tern__memoizer_sync_op_data_dep_slicing << endl;
path-slicer-options.cpp:    o << "tern::one_race_only    " << __tern__one_race_only << endl;
path-slicer-options.cpp:    o << "tern::order_log    " << __tern__order_log << endl;
path-slicer-options.cpp:    o << "tern::print_broken_sched_info    " << __tern__print_broken_sched_info << endl;
path-slicer-options.cpp:    o << "tern::print_finish_sched_info    " << __tern__print_finish_sched_info << endl;
path-slicer-options.cpp:    o << "tern::prune_useless_writes    " << __tern__prune_useless_writes << endl;
path-slicer-options.cpp:    o << "tern::record_mem_access    " << __tern__record_mem_access << endl;
path-slicer-options.cpp:    o << "tern::record_on_failure    " << __tern__record_on_failure << endl;
path-slicer-options.cpp:    o << "tern::recorder_ip    " << __tern__recorder_ip << endl;
path-slicer-options.cpp:    o << "tern::recorder_port    " << __tern__recorder_port << endl;
path-slicer-options.cpp:    o << "tern::reference_log    " << __tern__reference_log << endl;
path-slicer-options.cpp:    o << "tern::replay_expire_time    " << __tern__replay_expire_time << endl;
path-slicer-options.cpp:    o << "tern::replay_stat_log    " << __tern__replay_stat_log << endl;
path-slicer-options.cpp:    o << "tern::replayer_block_timeout_interval    " << __tern__replayer_block_timeout_interval << endl;
path-slicer-options.cpp:    o << "tern::replayer_check_hook_id    " << __tern__replayer_check_hook_id << endl;
path-slicer-options.cpp:    o << "tern::replayer_enforce_racy_edge    " << __tern__replayer_enforce_racy_edge << endl;
path-slicer-options.cpp:    o << "tern::replayer_load_cache    " << __tern__replayer_load_cache << endl;
path-slicer-options.cpp:    o << "tern::replayer_only_one_schedule    " << __tern__replayer_only_one_schedule << endl;
path-slicer-options.cpp:    o << "tern::replayer_print_debug_info    " << __tern__replayer_print_debug_info << endl;
path-slicer-options.cpp:    o << "tern::replayer_print_finishtime_interval    " << __tern__replayer_print_finishtime_interval << endl;
path-slicer-options.cpp:    o << "tern::replayer_skip_barrier    " << __tern__replayer_skip_barrier << endl;
path-slicer-options.cpp:    o << "tern::replayer_skip_constraint_check_if_one_child    " << __tern__replayer_skip_constraint_check_if_one_child << endl;
path-slicer-options.cpp:    o << "tern::replayer_track_timeout_interval    " << __tern__replayer_track_timeout_interval << endl;
path-slicer-options.cpp:    o << "tern::replayer_use_sched_track    " << __tern__replayer_use_sched_track << endl;
path-slicer-options.cpp:    o << "tern::replayer_use_wait_flag    " << __tern__replayer_use_wait_flag << endl;
path-slicer-options.cpp:    o << "tern::slicer_aaol_dbg_level    " << __tern__slicer_aaol_dbg_level << endl;
path-slicer-options.cpp:    o << "tern::slicer_calling_ctx_len    " << __tern__slicer_calling_ctx_len << endl;
path-slicer-options.cpp:    o << "tern::slicer_do_max_slicing    " << __tern__slicer_do_max_slicing << endl;
path-slicer-options.cpp:    o << "tern::slicer_do_slicing_based_on_vector_clock    " << __tern__slicer_do_slicing_based_on_vector_clock << endl;
path-slicer-options.cpp:    o << "tern::slicer_dump_trace    " << __tern__slicer_dump_trace << endl;
path-slicer-options.cpp:    o << "tern::slicer_end_index    " << __tern__slicer_end_index << endl;
path-slicer-options.cpp:    o << "tern::slicer_ignore_no_race_dominant_br    " << __tern__slicer_ignore_no_race_dominant_br << endl;
path-slicer-options.cpp:    o << "tern::slicer_ignore_potential_race    " << __tern__slicer_ignore_potential_race << endl;
path-slicer-options.cpp:    o << "tern::slicer_only_caculate_num_symbolic_brs    " << __tern__slicer_only_caculate_num_symbolic_brs << endl;
path-slicer-options.cpp:    o << "tern::slicer_only_enforce_races    " << __tern__slicer_only_enforce_races << endl;
path-slicer-options.cpp:    o << "tern::slicer_post_inst_id    " << __tern__slicer_post_inst_id << endl;
path-slicer-options.cpp:    o << "tern::slicer_prev_inst_id    " << __tern__slicer_prev_inst_id << endl;
path-slicer-options.cpp:    o << "tern::slicer_print_debug_info    " << __tern__slicer_print_debug_info << endl;
path-slicer-options.cpp:    o << "tern::slicer_range_analysis_w_use_pointer    " << __tern__slicer_range_analysis_w_use_pointer << endl;
path-slicer-options.cpp:    o << "tern::slicer_start_index    " << __tern__slicer_start_index << endl;
path-slicer-options.cpp:    o << "tern::slicer_use_dsa_alias    " << __tern__slicer_use_dsa_alias << endl;
path-slicer-options.cpp:    o << "tern::slicing_log    " << __tern__slicing_log << endl;
path-slicer-options.cpp:    o << "tern::suppress_redundant_races    " << __tern__suppress_redundant_races << endl;
path-slicer-options.cpp:    o << "tern::sync_log    " << __tern__sync_log << endl;
path-slicer-options.cpp:    o << "tern::tern_sync_log    " << __tern__tern_sync_log << endl;
path-slicer-options.cpp:    o << "tern::vector_clock_only    " << __tern__vector_clock_only << endl;
path-slicer-options.cpp:    o << "tern::window_size    " << __tern__window_size << endl;        
path-slicer-options.h:extern const char* __tern__broken_order_log;
path-slicer-options.h:extern int __tern__context_sensitive_alias_query;
path-slicer-options.h:extern int __tern__detect_race;
path-slicer-options.h:extern const char* __tern__dump_dir;
path-slicer-options.h:extern int __tern__fuzzy_satisfy;
path-slicer-options.h:extern const char* __tern__good_order_log;
path-slicer-options.h:extern const char* __tern__good_window_log;
path-slicer-options.h:extern const char* __tern__input;
path-slicer-options.h:extern int __tern__is_batch_program;
path-slicer-options.h:extern int __tern__is_mysqld;
path-slicer-options.h:extern const char* __tern__landmark_file;
path-slicer-options.h:extern int __tern__memoizer_condition_slicing;
path-slicer-options.h:extern int __tern__memoizer_do_fast_mem_ops;
path-slicer-options.h:extern int __tern__memoizer_force_ops_external;
path-slicer-options.h:extern int __tern__memoizer_print_debug_info;
path-slicer-options.h:extern int __tern__memoizer_print_execute_call;
path-slicer-options.h:extern int __tern__memoizer_race_data_dep_slicing;
path-slicer-options.h:extern int __tern__memoizer_round_robin_sched;
path-slicer-options.h:extern int __tern__memoizer_simplify_expr;
path-slicer-options.h:extern int __tern__memoizer_sync_op_data_dep_slicing;
path-slicer-options.h:extern int __tern__one_race_only;
path-slicer-options.h:extern const char* __tern__order_log;
path-slicer-options.h:extern int __tern__print_broken_sched_info;
path-slicer-options.h:extern int __tern__print_finish_sched_info;
path-slicer-options.h:extern int __tern__prune_useless_writes;
path-slicer-options.h:extern int __tern__record_mem_access;
path-slicer-options.h:extern int __tern__record_on_failure;
path-slicer-options.h:extern const char* __tern__recorder_ip;
path-slicer-options.h:extern int __tern__recorder_port;
path-slicer-options.h:extern const char* __tern__reference_log;
path-slicer-options.h:extern int __tern__replay_expire_time;
path-slicer-options.h:extern const char* __tern__replay_stat_log;
path-slicer-options.h:extern int __tern__replayer_block_timeout_interval;
path-slicer-options.h:extern int __tern__replayer_check_hook_id;
path-slicer-options.h:extern int __tern__replayer_enforce_racy_edge;
path-slicer-options.h:extern int __tern__replayer_load_cache;
path-slicer-options.h:extern int __tern__replayer_only_one_schedule;
path-slicer-options.h:extern int __tern__replayer_print_debug_info;
path-slicer-options.h:extern int __tern__replayer_print_finishtime_interval;
path-slicer-options.h:extern int __tern__replayer_skip_barrier;
path-slicer-options.h:extern int __tern__replayer_skip_constraint_check_if_one_child;
path-slicer-options.h:extern int __tern__replayer_track_timeout_interval;
path-slicer-options.h:extern int __tern__replayer_use_sched_track;
path-slicer-options.h:extern int __tern__replayer_use_wait_flag;
path-slicer-options.h:extern int __tern__slicer_aaol_dbg_level;
path-slicer-options.h:extern int __tern__slicer_calling_ctx_len;
path-slicer-options.h:extern int __tern__slicer_do_max_slicing;
path-slicer-options.h:extern int __tern__slicer_do_slicing_based_on_vector_clock;
path-slicer-options.h:extern int __tern__slicer_dump_trace;
path-slicer-options.h:extern int __tern__slicer_end_index;
path-slicer-options.h:extern int __tern__slicer_ignore_no_race_dominant_br;
path-slicer-options.h:extern int __tern__slicer_ignore_potential_race;
path-slicer-options.h:extern int __tern__slicer_only_caculate_num_symbolic_brs;
path-slicer-options.h:extern int __tern__slicer_only_enforce_races;
path-slicer-options.h:extern int __tern__slicer_post_inst_id;
path-slicer-options.h:extern int __tern__slicer_prev_inst_id;
path-slicer-options.h:extern int __tern__slicer_print_debug_info;
path-slicer-options.h:extern int __tern__slicer_range_analysis_w_use_pointer;
path-slicer-options.h:extern int __tern__slicer_start_index;
path-slicer-options.h:extern int __tern__slicer_use_dsa_alias;
path-slicer-options.h:extern const char* __tern__slicing_log;
path-slicer-options.h:extern int __tern__suppress_redundant_races;
path-slicer-options.h:extern const char* __tern__sync_log;
path-slicer-options.h:extern const char* __tern__tern_sync_log;
path-slicer-options.h:extern int __tern__vector_clock_only;
path-slicer-options.h:extern int __tern__window_size;
racy-edge.cpp:using namespace tern;
racy-edge.h:namespace tern {
rw-set.h:namespace tern {
slice.h:namespace tern {
stat.h:namespace tern {
tern-options.cpp:// from tern.default.options
