#!/bin/bash

set -e

ROOT=`pwd`

if [ ! -d $XTERN_ROOT ]; then
	echo "XTERN_ROOT is not defined"
	exit 1
fi

if [ ! -f phoenix-2.0.0.tar.gz ]; then
    wget http://mapreduce.stanford.edu/2.0.0/phoenix-2.0.0.tar.gz
fi
tar zxvf phoenix-2.0.0.tar.gz

pushd $XTERN_ROOT/apps/phoenix/

# download required files
check=$(dpkg-query -W -f='${Status} ${Version}\n' axel 2>&1)
if [[ "$check" != "install ok"* ]]; then
    echo "please install 'axel'"
    exit 1
fi
AXEL=$(which axel)
files=( histogram linear_regression string_match word_count )
for i in "${files[@]}"
do
    if [ ! -f $i.tar.gz ]; then
        $AXEL http://mapreduce.stanford.edu/datafiles/$i.tar.gz
    fi
done
md5sum -c md5check.txt

# clean up
rm -rf phoenix-2.0.0
tar zxf phoenix-2.0.0.tar.gz

# patch && make
pushd phoenix-2.0.0

# soba_init; nop for correct return address;
# use environment variable for choosing thrds #; fix seg. fault;
# modify makefile
patch -p1 < ../patch/new-phoenix-all-init.patch
# 7 map_reduce share one hint; 7 pthread use one each
patch -p1 < ../patch/new-phoenix-all-wait.patch

make
popd

# create link
find . -maxdepth 1 -type l -exec rm -rf {} \;
bench=( histogram linear_regression matrix_multiply string_match kmeans pca word_count )
for i in "${bench[@]}"
do
    ln -s phoenix-2.0.0/tests/$i/$i
    ln -s phoenix-2.0.0/tests/$i/$i-pthread
done

popd

if [[ -f linear_regression_3g.tar.gz ]]; then
    echo "DONE !"
    exit 0
fi

# Generate a bigger input file for linear_regression, 500MB is too short.
echo "Generating key_file_3GB.txt for linear_regression..."
tar zxvf linear_regression.tar.gz
cd linear_regression_datafiles
#rm key_file_3GB.txt
cat key_file_500MB.txt >> key_file_3GB.txt
cat key_file_500MB.txt >> key_file_3GB.txt
cat key_file_500MB.txt >> key_file_3GB.txt
cat key_file_500MB.txt >> key_file_3GB.txt
cat key_file_500MB.txt >> key_file_3GB.txt
cat key_file_500MB.txt >> key_file_3GB.txt
cd ..
tar zcvf linear_regression_3g.tar.gz linear_regression_datafiles/key_file_3GB.txt

echo "DONE!"
